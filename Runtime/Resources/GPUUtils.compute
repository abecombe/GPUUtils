#pragma kernel CopyBuffer1
#pragma kernel CopyBuffer32
#pragma kernel CopyBuffer128
#pragma kernel CopyBuffer1024
#pragma kernel ClearBuffer1
#pragma kernel ClearBuffer32
#pragma kernel ClearBuffer128
#pragma kernel ClearBuffer1024
#pragma kernel BuildDispatchIndirect

uint3 _DispatchThreadSize;

uint _BufferCount;
uint _BufferUIntCount;
uint _FromBufferUIntStartIndex;
uint _ToBufferUIntStartIndex;
ByteAddressBuffer _FromBuffer;
RWByteAddressBuffer _ToBuffer;
RWByteAddressBuffer _Buffer;

[numthreads(1, 1, 1)]
void CopyBuffer1()
{
    for (uint i = 0; i < _BufferUIntCount; i += 1)
        _ToBuffer.Store(4u * (i + _ToBufferUIntStartIndex), _FromBuffer.Load(4u * (i + _FromBufferUIntStartIndex)));
}
[numthreads(32, 1, 1)]
void CopyBuffer32(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _ToBuffer.Store(4u * (i + _ToBufferUIntStartIndex), _FromBuffer.Load(4u * (i + _FromBufferUIntStartIndex)));
}
[numthreads(128, 1, 1)]
void CopyBuffer128(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _ToBuffer.Store(4u * (i + _ToBufferUIntStartIndex), _FromBuffer.Load(4u * (i + _FromBufferUIntStartIndex)));
}
[numthreads(1024, 1, 1)]
void CopyBuffer1024(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _ToBuffer.Store(4u * (i + _ToBufferUIntStartIndex), _FromBuffer.Load(4u * (i + _FromBufferUIntStartIndex)));
}

[numthreads(1, 1, 1)]
void ClearBuffer1()
{
    for (uint i = 0; i < _BufferUIntCount; i += 1)
        _Buffer.Store(4u * i, 0);
}
[numthreads(32, 1, 1)]
void ClearBuffer32(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _Buffer.Store(4u * i, 0);
}
[numthreads(128, 1, 1)]
void ClearBuffer128(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _Buffer.Store(4u * i, 0);
}
[numthreads(1024, 1, 1)]
void ClearBuffer1024(uint thread_id : SV_DispatchThreadID)
{
    if (thread_id >= _DispatchThreadSize.x) return;

    for (uint i = thread_id; i < _BufferUIntCount; i += _BufferCount)
        _Buffer.Store(4u * i, 0);
}

StructuredBuffer<uint> _CountBuffer;
RWByteAddressBuffer _DispatchThreadSizeBuffer;
RWStructuredBuffer<uint> _DispatchIndirectArgsBuffer;
uint _CountBufferOffset;
uint _CountBufferSize;
uint3 _ThreadGroupSize;

[numthreads(3, 1, 1)]
void BuildDispatchIndirect(uint thread_id : SV_DispatchThreadID)
{
    const uint desired_thread_size = thread_id < _CountBufferSize ? _CountBuffer[_CountBufferOffset + thread_id] : 1u;
    const uint group_size = max(1u, (desired_thread_size + _ThreadGroupSize[thread_id] - 1u) / _ThreadGroupSize[thread_id]);
    _DispatchThreadSizeBuffer.Store(4u * thread_id, desired_thread_size);
    _DispatchIndirectArgsBuffer[thread_id] = group_size;
}